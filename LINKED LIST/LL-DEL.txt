/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <stdio.h>
#include <stdlib.h>

struct node{
    int num;
    struct node *nextptr;
}*stnode;

void createNodeList(int n);
void displayList();
int deleteFromStart();
int deleteFromEnd();
int deleteFromPostion(int n);

int main()
{
    int n;
    printf("enter number of nodes---\n");
    scanf("%d",&n);
    createNodeList(n);
    printf("linked list elements----\n");
    displayList();
    // printf("deleting from start----\n");
    // deleteFromStart();
    // printf("After deletelinked list elements----\n");
    // displayList();
    // printf("deleting from end----\n");
    // deleteFromEnd();
    // printf("After delete linked list elements----\n");
    // displayList();
    
    printf("deleting from position----\n");
    deleteFromPostion(3);
    printf("After delete linked list elements----\n");
    displayList();
    
    return 0;
}


void createNodeList(int n){
    struct node *fnNode,*tmp;
    int num,i;

    stnode=(struct node*)malloc(sizeof(struct node));
    if(stnode == NULL){
        printf("unable to assign memory\n");
        return;
    }
    else{
        printf("input data for first element--\n");
        scanf("%d",&num);
        //first node
        stnode->num=num;
        stnode->nextptr=NULL;
        tmp=stnode;

        for(i=2;i<=n;i++){

            fnNode=(struct node*)malloc(sizeof(struct node));
            if(fnNode == NULL){
                printf("unable to assign memory\n");
                return;
            }else{
                printf("input data for %d element--\n",i);
                scanf("%d",&num);
                
                //new node
                fnNode->num=num;
                fnNode->nextptr=NULL;
                
                //linkage with previous node
                tmp->nextptr=fnNode;

                //move last pointer to new node
                tmp=tmp->nextptr;

            }
            
        }
    }
}

void displayList(){
    struct node* tmp;
    if(stnode == NULL){
        printf("linked list is empty---\n");
    }else{
        tmp=stnode;
        while(tmp != NULL){
            printf("DATA = %d \n",tmp->num);
            tmp=tmp->nextptr;
        }
    }

}

int deleteFromStart(){
    struct node *tmp,*first;
    if(stnode == NULL){
        printf("linked list is empty \n");
        return 0;
    }else{
        tmp=stnode;
        if(tmp->nextptr == NULL){
            free(tmp);
            
        }else{
            first=tmp;
            tmp=tmp->nextptr;
            free(first);
            stnode=tmp;
        }
    }
}

int deleteFromEnd(){
    struct node *tmp,*prev;
    if(stnode == NULL){
        printf("linked list is empty \n");
        return 0;
    }else{
        tmp=stnode;
        if(tmp->nextptr == NULL){
            free(tmp);
            
        }else{
            while(tmp->nextptr != NULL){
                prev=tmp;
                tmp=tmp->nextptr;
            }
            prev->nextptr=NULL;
            free(tmp);
        }
    }
}

int deleteFromPostion(int pos){
    struct node *tmp,*prev, *next;
    
    if(stnode == NULL){
        printf("linked list is empty \n");
        return 0;
    }else{
        tmp=stnode;
        if(tmp->nextptr == NULL){
            //if first node
            free(tmp);
            
        }else{
            for(int i=1;i<pos;i++){
                if(tmp->nextptr != NULL){
                    //previos node from tmp
                    prev=tmp;
                    //tmp node
                    tmp=tmp->nextptr;
                    //next node from tmp
                    next=tmp->nextptr;
                    
                }else{
                    printf("entered size is greater than list size--\n");
                    prev=NULL;
                    next=NULL;
                    break;
                }
            }
            
            if(prev != NULL && next != NULL){
                prev->nextptr=next;
                free(tmp);
            }
        }
    }
}